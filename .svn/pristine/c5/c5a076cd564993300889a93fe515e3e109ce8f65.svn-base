import { Indicator } from 'mint-ui';
import axios from 'axios'
var commonMixin = {
	methods: {
		androidOrios() {
			var _this = this;
			// 1表示IOS；2表示安卓
			var androidOrios = 0;
			var ua = navigator.userAgent;

			if(ua.indexOf('{') === 0) {
				var oua = JSON.parse(ua);
				// alert(oua.sourceType);
				if(oua.sourceType === "2") {
					// 安卓使用旧的JSBridge
					androidOrios = 2;
				}
			} else if(ua.indexOf('cjmlappios') > -1) {
				androidOrios = 1;
			}
			return androidOrios;
		},
		/**与APP交互的基础方法 **/
		setupWebViewJavascriptBridge(callback) {
			var _this = this;
			var androidOrios = _this.androidOrios();
			if(window.WebViewJavascriptBridge) {
				return callback(WebViewJavascriptBridge)
			} else {
				if(androidOrios == 2) {
					document.addEventListener('WebViewJavascriptBridgeReady', function() {
						callback(WebViewJavascriptBridge)
					}, false)
					return;
				} else {

					if(window.WVJBCallbacks) {
						return window.WVJBCallbacks.push(callback);
					}
					window.WVJBCallbacks = [callback];
					var WVJBIframe = document.createElement('iframe');
					WVJBIframe.style.display = 'none';
					WVJBIframe.src = 'https://__bridge_loaded__';
					document.documentElement.appendChild(WVJBIframe);
					setTimeout(function() {
						document.documentElement.removeChild(WVJBIframe)
					}, 0);
					return;
				}
			}
		},
		//安卓初始化的方法
		isInit() {
			var _this = this;
			this.setupWebViewJavascriptBridge(function(bridge) {
				if(_this.androidOrios() == 2) {
					bridge.init(function(message, responseCallback) {
						if(responseCallback) {
							responseCallback("Right back atcha");
						}
					});
				}
			})
		},
		//ajax获取数据
		ajax(opt) {
			var _this = this;
			if(_this.androidOrios() > 0) {
				this.setupWebViewJavascriptBridge(function(bridge) {
					// 获取用户信息
					bridge.callHandler('native_GetBaseInfo', {}, function(response) {
						opt = opt || {};
						opt.method = opt.method.toUpperCase() || 'POST';
						opt.url = opt.url || '';
						opt.async = opt.async;
						opt.data = opt.data || null;
						opt.success = opt.success || function() {};
						opt.beforeSend = opt.beforeSend || function() {
							Indicator.open({
								spinnerType: 'fading-circle'
							});
						};
						opt.complete = opt.complete || function() {
							setTimeout(function() {
								Indicator.close();
							}, 500);
						};
						var _SourceType = 1;
						var _UserTicket = response.userticket; //
						var _key = response.machinekey; //"123456789";
						var _signCode = "789649779a49df79sad7fa9sd87";
						var _time = Math.round(new Date().getTime() / 1000).toString();
						var xmlHttp = null;
						var _dataOpts = {
							"Header": {
								"SourceType": _SourceType,
								"UserTicket": _UserTicket,
								"SignCode": _signCode,
								"machineKey": _key,
								"timeStamp": _time,
								"version": response.version,
							},
							"Body": opt.data
						};
						opt.data = _dataOpts;
						return $.ajax(opt);
					})
				})
			} else {
				opt = opt || {};
				opt.method = opt.method.toUpperCase() || 'POST';
				
				opt.url = opt.url || '';
				opt.async = opt.async;
				opt.data = opt.data || null;
				opt.success = opt.success || function() {};
				opt.beforeSend = opt.beforeSend || function() {

					Indicator.open({
						spinnerType: 'fading-circle'
					});
				};
				opt.complete = opt.complete || function() {

					setTimeout(function() {
						Indicator.close();
					}, 500);
				};
				var _SourceType = 1;
				var _UserTicket = "61D79AA77D90B248B665DD57BE9F70C6C30E0959BAF0F751E669F10B3FD681DC63BBFD6F33153572";
				var _key = "123456789";
				var _signCode = "789649779a49df79sad7fa9sd87";
				var _time = Math.round(new Date().getTime() / 1000).toString();
				var xmlHttp = null;
				var _dataOpts = {
					"Header": {
						"SourceType": _SourceType,
						"UserTicket": _UserTicket,
						"SignCode": _signCode,
						"machineKey": _key,
						"timeStamp": _time,
						"version": 4.0,
					},
					"Body": opt.data
				};
				opt.data = _dataOpts;
				return $.ajax(opt);
			}

		},
		//存储cookie
		setCookie(name, value) {
			var _this = this;
			var Days = 30;
			var exp = new Date();
			exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);
			document.cookie = name + "=" + escape(value) + ";expires=" + exp.toGMTString();
		},
		//得到cookie
		getCookie(name) {
			var arr, reg = new RegExp("(^| )" + name + "=([^;]*)(;|$)");
			if(arr = document.cookie.match(reg))
				return unescape(arr[2]);
			else
				return null;
		},
		//获取warekey
		S4() {
			return(((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
		},
		//获取warekey
		getNewGuid() {
			var _this = this;
			localStorage.setItem('userkey', (_this.S4() + _this.S4() + '-' + _this.S4() + '-4' + _this.S4().substr(0, 3) + '-' + _this.S4() + '-' + _this.S4() + _this.S4() + _this.S4()).toLowerCase());
			return(_this.S4() + _this.S4() + '-' + _this.S4() + '-4' + _this.S4().substr(0, 3) + '-' + _this.S4() + '-' + _this.S4() + _this.S4() + _this.S4()).toLowerCase();
		},
		//默认登录
		appUserTicketLogin(callback) {
			var _this = this;
			_this.setupWebViewJavascriptBridge(function(bridge) {
				// 获取用户信息
				bridge.callHandler('native_GetBaseInfo', {}, function(response) {
					$.ajax({
						type: "POST",
						url: process.env.apiDomain + '/UserInfo/LoginFromApp',
						data: {
							"Header": {
								"SourceType": 1,
								"UserPermit": 2,
								"UserTicket": "",
								"SignCode": "",
							},
							"Body": {
								"userTicket": response.userticket
							}
						},
						success: function(data) {
							_this.setCookie('CJML_CloudShop_UserTicket', data.Body.userTicket);

							if(callback) {
								callback();
							}
						}
					});
				})
			});
		},
		//外面调用默认登录
		appLoadComplete(callback) {
			if(callback) {
				var _this = this;
				_this.isInit();
				// 如果是APP则调用登录
				if(_this.androidOrios() > 0) {
					_this.appUserTicketLogin(function() {
						callback();
					});
				} else {
					callback();

				}
			}
		},
		//设置原生标题
		setTitle(title) {
			this.setupWebViewJavascriptBridge(function(bridge) {
				bridge.callHandler('native_SetTitle', title, function(response) {});
			});
		},
		//获取url参数
		getQueryString(name) {
			var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
			var r = window.location.search.substr(1).match(reg);
			if(r != null) return unescape(r[2]);
			return null;
		},
		// 获得需要还原的车型选择数据
		getReductionAuto() {
			var ReductionAuto = sessionStorage.getItem("ReductionAuto");
			if(ReductionAuto) {
				return JSON.parse(ReductionAuto);
			}
		},
		// 设置需要还原的车型选择数据
		setReductionAuto(data) {
			sessionStorage.setItem("ReductionAuto", data);
		},
		// 构造车型品牌Logo路径
		buildAutoBrandLogo(filename, imagesize) {
			var files = filename.split(".");
			files[0] = this.stringPad(files[0]);
			return process.env.sourceDomain + "/autobrandlogo" + files[0] + imagesize + "." + files[1];
		},
		// 构造车型图片路径
		buildAutoModelLogo(filename, imagesize) {
			var filenamelist = filename.split(";");
			var ret = "";
			for(var i = 0; i < filenamelist.length; i++) {
				var files = filenamelist[i].split(".");
				files[0] = this.stringPad(files[0]);
				ret += process.env.sourceDomain + "/carmodelpic" + files[0] + imagesize + "." + files[1] + ",";
			}
			if(ret != "") {
				return ret.substring(0, ret.length - 1);
			} else {
				return ret;
			}

		},
		//取得弹出层关闭次数
		getPopupCount(key) {
			var _this=this;
			// 当前浏览器是否支持localStorage
			if(localStorage) {
				let count = localStorage.getItem(key);
				if(count){
					return count;
				}else
				{
					return 0;
				}
			}
		},
		//取得弹出层关闭次数
		SetPopupCount(key) {
			var _this=this;
			// 当前浏览器是否支持localStorage
			if(localStorage) {
				// localStorage.removeItem('CJML_APP_PlaceOrder_Count');
				let count = localStorage.getItem(key);
				if(count){
					localStorage.setItem(key, parseInt(count)+1);
				}else
				{
					localStorage.setItem(key, 0);
				}
			}
		},
		// 补全方法
		stringPad(num) {
			var filepath = "";
			var maxlength = 9;
			var shengyu = maxlength - num.length;
			if(shengyu > 0) {
				for(var i = 0; i < shengyu; i++) {
					num = "0" + num;
				}
			}

			for(var i = 0; i < maxlength; i++) {
				if(i % 3 == 0) {
					filepath += "/";
				}
				if(num[i]) {
					filepath += num[i];
				}
			}
			return filepath;
		},
		//ios和andriod,浏览器的路径跳转
		goUrl(urls, paramObj) {
			var _this = this;
			var headerDomain = window.location.href.split('h5')[0] + 'h5/' + urls + '.html';
			var url = process.env.siteDirectory + urls + '.html';
			if(paramObj != "") {
				var str = "";
				for(var v = 0; v < paramObj.length; v++) {
					if(v == paramObj.length - 1) {
						str = str + paramObj[v].param + '=' + paramObj[v].value;
					} else {
						str = str + paramObj[v].param + '=' + paramObj[v].value + '&';
					}
				};
				headerDomain = headerDomain + '?' + str;
				url = url + '?' + str;
			};
			if(_this.androidOrios() == 0) {
				window.location.href = url;
			} else {
				window.location.href = headerDomain;
			}
		},
		// 监听回退事件
		listenBackEvent(defaulturl) {
			var _this = this;
			_this.$nextTick(function() {
				$(".returnLink").click(function() {
					// 浏览器逻辑
					var backurl = _this.getQueryString("backurl");
					if(backurl && backurl.length > 0 && backurl != "null") {
						if(backurl == "native_CloseWebview") {
							_this.setupWebViewJavascriptBridge(function(bridge) {
								bridge.callHandler('native_CloseWebview', '', function(response) {});
							});
						} else {
							window.location.href = backurl;
						}
					} else if(defaulturl && defaulturl.length > 0 && defaulturl != "null") {
						if(defaulturl == "native_CloseWebview") {
							_this.setupWebViewJavascriptBridge(function(bridge) {
								bridge.callHandler('native_CloseWebview', '', function(response) {});
							});
						} else {
							window.location.href = defaulturl;
						}
					} else {
						window.history.go(-1);
					}
				});
			});
		},
		//拨打电话
		callPhone(number){
            this.setupWebViewJavascriptBridge(function (bridge) {
                bridge.callHandler('native_CallPhone', number, function (response) {
                })
            })
		},
		//回到首页
		GoHome(){
            this.setupWebViewJavascriptBridge(function (bridge) {
                bridge.callHandler('native_GoHome', '', function (response) {
                });
            });
		},
		//扫描二维码
        QrcodeScan(){
            this.setupWebViewJavascriptBridge(function (bridge) {
                bridge.callHandler('native_QrcodeScan', '', function (response) {
                	return response
                });
            });
		},
		//录音
        VoiceRecord(){
            this.setupWebViewJavascriptBridge(function (bridge) {
                bridge.callHandler('native_VoiceRecord', '', function (response) {
                	return response
                });
            });
		},
		//访问通讯录
        AccessPhoneAddress(){
            this.setupWebViewJavascriptBridge(function (bridge) {
                bridge.callHandler('native_AccessPhoneAddress', '', function (response) {
					return response
                });
            });
		},
		//隐藏原生导航
        HideHeader(){
            this.setupWebViewJavascriptBridge(function (bridge) {
                bridge.callHandler('native_HideHeader', '', function (response) {});
            });
		},
		//关闭Webview
        CloseWebview(){
            this.setupWebViewJavascriptBridge(function (bridge) {
                bridge.callHandler('native_CloseWebview', '', function (response) {

                });
            });
		},
		//上传图片
        UploadImage(){
            this.setupWebViewJavascriptBridge(function (bridge) {
                bridge.callHandler('native_UploadImage', '', function (response) {
                    return response;
                });
            });
		},
		//获取用户信息
        goBaseInfo(){
            this.setupWebViewJavascriptBridge(function (bridge) {
                bridge.callHandler('native_GetBaseInfo', {}, function (response) {
                    return response;
                });
            });
		},
		//VIN扫描
        VinScan(url){
            this.setupWebViewJavascriptBridge(function (bridge) {
                bridge.callHandler('native_VinScan', url, function (response) {
                	return response;
                })
            })
		},
		//用axios进行数据交互
		axios(opt){
            this.$http = axios
            var _this = this;
            if(this.androidOrios() > 0) {
                this.setupWebViewJavascriptBridge(function(bridge) {
                    bridge.callHandler('native_GetBaseInfo', {}, function(response) {
                        var opts = {};
                        opts.method = opt.method.toUpperCase() || 'POST';
                        opts.url = opt.url || '';
                        opts.data = opt.data || null;


                        var _SourceType = 1;
                        var _UserTicket = response.userticket; //
                        var _key = response.machinekey; //"123456789";
                        var _signCode = "789649779a49df79sad7fa9sd87";
                        var _time = Math.round(new Date().getTime() / 1000).toString();
                        var xmlHttp = null;
                        var _dataOpts = {
                            "Header": {
                                "SourceType": _SourceType,
                                "UserTicket": _UserTicket,
                                "SignCode": _signCode,
                                "machineKey": _key,
                                "timeStamp": _time,
                                "version": response.version,
                            },
                            "Body": opts.data
                        };
                        opts.data = _dataOpts;
                        this.$http(opts).then(opt.success).then(opt.error)
					})
				})

			}else {

                var opts = {};
                opts.method = opt.method.toUpperCase() || 'POST';
                opts.url = opt.url || '';
                opts.data = opt.data || null;
                opts.dataType="JSON";
                var _SourceType = 1;
                var _UserTicket = "61D79AA77D90B248B665DD57BE9F70C6C30E0959BAF0F751E669F10B3FD681DC63BBFD6F33153572";
                var _key = "123456789";
                var _signCode = "789649779a49df79sad7fa9sd87";
                var _time = Math.round(new Date().getTime() / 1000).toString();
                var xmlHttp = null;
                var _dataOpts = {
                    "Header": {
                        "SourceType": _SourceType,
                        "UserTicket": _UserTicket,
                        "SignCode": _signCode,
                        "machineKey": _key,
                        "timeStamp": _time,
                        "version": 4.0,
                    },
                    "Body": opts.data
                };
                opts.data = _dataOpts;
                this.$http(opts).then(opt.success).then(opt.error);
            }
		}
	}
}
export {
	commonMixin
};
